// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Playlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  videos    Video[]
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId Int?
}

model Video {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  title           String    @db.VarChar(255)
  content         String?
  published       Boolean   @default(false)
  likes           Int       @default(0)
  dislikes        Int       @default(0)
  total_comments  Int       @default(0)
  comments       Comment[]
  video_id        String    @unique @db.VarChar(32)
  thumbnail_id    String    @unique @db.VarChar(32)
  playlist        Playlist? @relation(fields: [playlistId], references: [id])
  playlistId      Int?
  author          User      @relation(fields: [authorId], references: [id])
  authorId        Int
  channel         Channel?   @relation(fields: [channelId], references: [id])
  channelId       Int?
  liked_by        User[]    @relation("LikedVideos")
}

model Comment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String 
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int 
  video     Video     @relation(fields: [videoId], references: [id])
  videoId   Int 
  likes     Int       @default(0)
  dislikes  Int       @default(0)
  replies   Comment[] @relation("CommentReplies")
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?      @unique
}

model Channel {
  id                Int     @id @default(autoincrement())
  tag               String  @unique
  name              String  @default("Channel")
  photo             String?
  bio               String?
  total_subscribers Int     @default(0)
  // many to many relationship with User
  subscribers       User[]  @relation("ChannelSubscriptions")
  total_videos      Int     @default(0)
  videos            Video[]
  playlists         Playlist[]
  // one to one relationship with User
  owner             User    @relation(fields: [ownerId], references: [id])
  ownerId           Int     @unique
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  name         String?
  photo        String?
  videos       Video[]
  playlists    Playlist[]
  liked_videos Video[]      @relation("LikedVideos")
  comments     Comment[]
  // many to many relationship with Channel
  subscriptions     Channel[]    @relation("ChannelSubscriptions")
  // one to one relationship with Channel
  ownChannel   Channel?
}